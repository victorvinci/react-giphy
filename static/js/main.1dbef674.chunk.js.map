{"version":3,"sources":["components/SearchBar/searchBar.jsx","components/Gif/gif.js","components/GifList/gifList.jsx","components/App/App.js","serviceWorker.js","index.js"],"names":["SearchBar","updateList","event","_this","props","searchFunction","target","value","react_default","a","createElement","type","className","onChange","this","Component","Gif","handleClick","selectGif","id","src","concat","alt","onClick","GifList","renderList","gifs","map","gif","Gif_gif","key","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","search","query","giphy","q","rating","limit","error","result","setState","data","selectedGifId","state","searchBar","gifList","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oNAceA,6MAXbC,WAAa,SAACC,GACZC,EAAKC,MAAMC,eAAeH,EAAMI,OAAOC,gFAIvC,OACEC,EAAAC,EAAAC,cAAA,SAAOC,KAAK,OAAOC,UAAU,cAAcC,SAAUC,KAAKb,oBAPxCc,aCaTC,6MAZbC,YAAc,WACZd,EAAKC,MAAMc,UAAUf,EAAKC,MAAMe,6EAIhC,IAAMC,EAAG,kCAAAC,OAAqCP,KAAKV,MAAMe,GAAhD,YACT,OACEX,EAAAC,EAAAC,cAAA,OAAKU,IAAKA,EAAKE,IAAI,GAAGV,UAAU,MAAMW,QAAST,KAAKG,qBARxCF,aCgBHS,6MAbbC,WAAa,WACX,OAAOtB,EAAKC,MAAMsB,KAAKC,IAAI,SAAAC,GAAG,OAAIpB,EAAAC,EAAAC,cAACmB,EAAD,CAAKV,GAAIS,EAAIT,GAAIW,IAAKF,EAAIT,GAAID,UAAWf,EAAKC,MAAMc,uFAItF,OACEV,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACZE,KAAKW,qBARQV,aCgDPgB,cA5Cb,SAAAA,EAAY3B,GAAO,IAAAD,EAAA,OAAA6B,OAAAC,EAAA,EAAAD,CAAAlB,KAAAiB,IACjB5B,EAAA6B,OAAAE,EAAA,EAAAF,CAAAlB,KAAAkB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAtB,KAAMV,KAQRiC,OAAS,SAACC,GACRC,IAAM,oCAAoCF,OAAO,CAC/CG,EAAGF,EACHG,OAAQ,IACRC,MAAO,IACN,SAACC,EAAOC,GACTzC,EAAK0C,SAAS,CACZnB,KAAMkB,EAAOE,UAhBA3C,EAqBnBe,UAAY,SAACC,GACXhB,EAAK0C,SAAS,CACZE,cAAe5B,KApBjBhB,EAAK6C,MAAQ,CACXtB,KAAM,GACNqB,cAAe,iBALA5C,wEA4BjB,OACEK,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACbJ,EAAAC,EAAAC,cAACuC,EAAD,CAAW5C,eAAgBS,KAAKuB,SAChC7B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACbJ,EAAAC,EAAAC,cAACmB,EAAD,CAAKV,GAAIL,KAAKkC,MAAMD,kBAGxBvC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACbJ,EAAAC,EAAAC,cAACwC,EAAD,CAASxB,KAAMZ,KAAKkC,MAAMtB,KAAMR,UAAWJ,KAAKI,qBAtCxCH,aCKEoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1dbef674.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass SearchBar extends Component {\n  updateList = (event) => {\n    this.props.searchFunction(event.target.value);\n  }\n\n  render() {\n    return (\n      <input type=\"text\" className=\"form-search\" onChange={this.updateList} />\n    );\n  }\n}\n\nexport default SearchBar;\n","import React, { Component } from 'react';\n\nclass Gif extends Component {\n  handleClick = () => {\n    this.props.selectGif(this.props.id);\n  }\n\n  render() {\n    const src = `https://media2.giphy.com/media/${this.props.id}/200.gif`;\n    return (\n      <img src={src} alt=\"\" className=\"gif\" onClick={this.handleClick} />\n    );\n  }\n}\n\nexport default Gif;\n","import React, { Component } from 'react';\n\nimport Gif from '../Gif/gif';\n\nclass GifList extends Component {\n  renderList = () => {\n    return this.props.gifs.map(gif => <Gif id={gif.id} key={gif.id} selectGif={this.props.selectGif} />);\n  }\n\n  render() {\n    return (\n      <div className=\"gif-list\">\n        {this.renderList()}\n      </div>\n    );\n  }\n}\n\nexport default GifList;\n","import React, { Component } from 'react';\nimport giphy from 'giphy-api';\n\nimport SearchBar from '../SearchBar/searchBar';\nimport Gif from '../Gif/gif';\nimport GifList from '../GifList/gifList';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      gifs: [],\n      selectedGifId: \"h9KtiB6DgiS2s\"\n    };\n  }\n\n  search = (query) => {\n    giphy('pDErXezbEJ56b0ySaZY0NAh1A3MxUTDm').search({\n      q: query,\n      rating: 'g',\n      limit: 10\n    }, (error, result) => {\n      this.setState({\n        gifs: result.data\n      });\n    });\n  }\n\n  selectGif = (id) => {\n    this.setState({\n      selectedGifId: id\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"left-scene\">\n          <SearchBar searchFunction={this.search} />\n          <div className=\"selected-gif\">\n            <Gif id={this.state.selectedGifId} />\n          </div>\n        </div>\n        <div className=\"right-scene\">\n          <GifList gifs={this.state.gifs} selectGif={this.selectGif} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}